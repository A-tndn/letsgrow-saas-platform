"""Add social media accounts and posts tables

Revision ID: add_social_accounts_posts_tables
Revises: add_subscription_billing_tables
Create Date: 2025-09-19 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'add_social_accounts_posts_tables'
down_revision = 'add_subscription_billing_tables'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Create social_accounts table
    op.create_table('social_accounts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('platform', sa.Enum('TWITTER', 'INSTAGRAM', 'LINKEDIN', 'REDDIT', 'FACEBOOK', 'TIKTOK', name='socialplatform'), nullable=False),
    sa.Column('platform_user_id', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=True),
    sa.Column('profile_image_url', sa.String(length=500), nullable=True),
    sa.Column('access_token', sa.Text(), nullable=True),
    sa.Column('refresh_token', sa.Text(), nullable=True),
    sa.Column('token_expires_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'ERROR', 'PENDING', 'EXPIRED', name='socialaccountstatus'), nullable=False),
    sa.Column('followers_count', sa.Integer(), nullable=True),
    sa.Column('following_count', sa.Integer(), nullable=True),
    sa.Column('posts_count', sa.Integer(), nullable=True),
    sa.Column('auto_post_enabled', sa.Boolean(), nullable=False),
    sa.Column('posting_schedule', sa.JSON(), nullable=True),
    sa.Column('last_sync_at', sa.DateTime(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_social_accounts_user_id'), 'social_accounts', ['user_id'], unique=False)
    op.create_index(op.f('ix_social_accounts_platform_user_id'), 'social_accounts', ['platform', 'platform_user_id'], unique=False)

    # Create social_posts table
    op.create_table('social_posts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('social_account_id', sa.Integer(), nullable=False),
    sa.Column('content_id', sa.Integer(), nullable=True),
    sa.Column('text_content', sa.Text(), nullable=False),
    sa.Column('media_urls', sa.JSON(), nullable=True),
    sa.Column('hashtags', sa.JSON(), nullable=True),
    sa.Column('mentions', sa.JSON(), nullable=True),
    sa.Column('platform_post_id', sa.String(length=255), nullable=True),
    sa.Column('platform_url', sa.String(length=500), nullable=True),
    sa.Column('scheduled_at', sa.DateTime(), nullable=True),
    sa.Column('posted_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('likes_count', sa.Integer(), nullable=True),
    sa.Column('comments_count', sa.Integer(), nullable=True),
    sa.Column('shares_count', sa.Integer(), nullable=True),
    sa.Column('reach_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['content_id'], ['content.id'], ),
    sa.ForeignKeyConstraint(['social_account_id'], ['social_accounts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_social_posts_user_id'), 'social_posts', ['user_id'], unique=False)
    op.create_index(op.f('ix_social_posts_social_account_id'), 'social_posts', ['social_account_id'], unique=False)
    op.create_index(op.f('ix_social_posts_status'), 'social_posts', ['status'], unique=False)
    op.create_index(op.f('ix_social_posts_scheduled_at'), 'social_posts', ['scheduled_at'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop social_posts table
    op.drop_index(op.f('ix_social_posts_scheduled_at'), table_name='social_posts')
    op.drop_index(op.f('ix_social_posts_status'), table_name='social_posts')
    op.drop_index(op.f('ix_social_posts_social_account_id'), table_name='social_posts')
    op.drop_index(op.f('ix_social_posts_user_id'), table_name='social_posts')
    op.drop_table('social_posts')

    # Drop social_accounts table
    op.drop_index(op.f('ix_social_accounts_platform_user_id'), table_name='social_accounts')
    op.drop_index(op.f('ix_social_accounts_user_id'), table_name='social_accounts')
    op.drop_table('social_accounts')

    # Drop enums
    op.execute('DROP TYPE IF EXISTS socialaccountstatus')
    op.execute('DROP TYPE IF EXISTS socialplatform')

    # ### end Alembic commands ###
